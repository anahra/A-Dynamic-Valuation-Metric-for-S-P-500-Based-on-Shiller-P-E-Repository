"""
Script to display metrics from the cashflows.csv file generated by the analysis
"""
import pandas as pd

try:
    # Load the results data
    print("Loading results from cashflows.csv...\n")
    df = pd.read_csv("strategies/cashflows.csv")
    
    # Check metrics
    metrics_columns = [
        'Benchmark_Mean_Return', 'Strategy_Mean_Return',
        'Benchmark_Sharpe_Ratio', 'Strategy_Sharpe_Ratio',
        'Benchmark_IRR', 'Strategy_IRR'
    ]
    
    # Check if there's a row with metrics in the file
    found_metrics = False
    for col in metrics_columns:
        if col in df.columns:
            found_metrics = True
            break
    
    if not found_metrics:
        # If metrics aren't in the file, print some info about the file structure
        print("No metrics columns found in cashflows.csv")
        print(f"Available columns: {df.columns.tolist()}")
        print(f"File shape: {df.shape}")
        print("\nDisplaying summary statistics for portfolio values instead:\n")
        
        # Calculate annualized returns from monthly data
        if 'Strategy_Portfolio' in df.columns and 'Benchmark_Portfolio' in df.columns:
            print(f"Final Benchmark Portfolio Value: ${df['Benchmark_Portfolio'].iloc[-1]:,.2f}")
            print(f"Final Strategy Portfolio Value: ${df['Strategy_Portfolio'].iloc[-1]:,.2f}")
            
            # Calculate performance difference
            benchmark_final = df['Benchmark_Portfolio'].iloc[-1]
            strategy_final = df['Strategy_Portfolio'].iloc[-1]
            percent_diff = ((strategy_final / benchmark_final) - 1) * 100
            print(f"Strategy outperformance: {percent_diff:.2f}%")
    else:
        # If metrics columns are found, display them
        print("Metrics from cashflows.csv:")
        metrics_row = df.iloc[-1]
        
        for col in metrics_columns:
            if col in df.columns:
                value = metrics_row[col]
                if 'Sharpe' in col:
                    print(f"{col}: {value:.4f}")
                elif 'IRR' in col or 'Return' in col:
                    print(f"{col}: {value:.2%}")
                else:
                    print(f"{col}: {value:.4f}")
    
except Exception as e:
    print(f"Error: {e}")
